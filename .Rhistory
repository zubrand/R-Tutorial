dcast(Year + Geo ~ Gen_eco, value.var = "Tot", fun.aggregate = sum, na.rm = T) %>%
setNames(c("Year", "Geo", "I", "II", "III")) %>%
mutate(TDR = (I+III)/II, OADR = III/II, JADR = I/II, Seniority = III/I) %>%
select(-I,-II,-III) %>% merge(Ratios)
head(Ratios)
# Chunk 23: gvis2
M <- gvisMotionChart(Ratios, idvar = "Geo", timevar = "Year", options = list(width = 550, height = 450), chartid = "chartid")
print(M, 'chart')
# Chunk 24: rcharts
library(rCharts)
data <-
usp = reshape2::melt(USPersonalExpenditure)
# get the decades into a date Rickshaw likes
usp$Var2 <- as.numeric(as.POSIXct(paste0(usp$Var2, "-01-01")))
p4 <- Rickshaw$new()
p4$layer(value ~ Var2, group = "Var1", data = usp, type = "area", width = 560)
# add a helpful slider this easily; other features TRUE as a default
p4$set(slider = TRUE)
p4$save('fig/p4.html', cdn = TRUE)
cat('<iframe src="fig/p4.html" width=100%, height=600></iframe>')
# Chunk 25: pyramid
# Special package
library(pyramid)
dt_pyramid %>% filter(Geo == "CZ" & Year == 2000) %>% select(M, F, Age) %>%
pyramid(Csize = 1, Cstep = 5, AxisFM = 'd', Cgap = .1, Laxis = 0:4*25000,
main = "Pyramid of Czech population in 2000")
# Usual ggplot
library(scales) # library for numeric formatting
tmp_pyr <- dt_pyramid %>% filter(Geo %in% c("CZ","BE") & Year %in% c(2000, 2010)) %>%
select(-X, -Gen_bio, -Gen_eco) %>% melt(id = c("Age", "Geo", "Year")) %>%
mutate(Sex = variable, Population = value)
ggplot(data = tmp_pyr, aes(x = Age, y = Population, fill = Sex)) +
geom_bar(data = subset(tmp_pyr, Sex == "F"), stat = "identity") +
geom_bar(data = subset(tmp_pyr, Sex == "M"), aes(y=-Population), stat = "identity") +
scale_y_continuous(labels = function(x) comma(abs(x))) +
coord_flip() + ggtitle("Pyramid graphs of selected years and countries") +
scale_fill_brewer(palette = "Set1") +
facet_grid(Geo ~ Year) + theme_bw()
# ggplot with 5-year grouping
tmp_pyr <- dt_pyramid %>% filter(Geo %in% c("CZ","BE") & Year %in% c(2000, 2010)) %>%
select(-X, -Gen_bio, -Gen_eco) %>% melt(id = c("Age", "Geo", "Year")) %>%
mutate(Sex = variable, Population = value, Age = Age - Age %% 5) %>% group_by(Age, Geo, Year, Sex) %>% summarize(Population = sum(Population))
ggplot(data = tmp_pyr, aes(x = Age, y = Population, fill = Sex)) +
geom_bar(data = subset(tmp_pyr, Sex == "F"), stat = "identity") +
geom_bar(data = subset(tmp_pyr, Sex == "M"), aes(y=-Population), stat = "identity") +
scale_y_continuous(labels = function(x) comma(abs(x))) +
coord_flip() + ggtitle("Pyramid graphs of selected years and countries\n5-year grouping") +
scale_fill_brewer(palette = "Set1") +
facet_grid(Geo ~ Year) + theme_bw()
# Chunk 26
#Example of R presentation is provided [here](google.com).
tmp <- dt_pyramid %>% filter(Geo == "CZ") %>%
group_by(Gen_eco, Year) %>% summarize(Population = sum(F+M)) %>%
mutate(Generation = Get_eco, Year = as.numeric(as.POSIXct(paste0(Year, "-01-01"))))
tmp <- dt_pyramid %>% filter(Geo == "CZ") %>%
group_by(Gen_eco, Year) %>% summarize(Population = sum(F+M)) %>%
mutate(Generation = Gen_eco, Year = as.numeric(as.POSIXct(paste0(Year, "-01-01"))))
View(tmp)
tmp <- dt_pyramid %>% filter(Geo == "CZ") %>%
group_by(Gen_eco, Year) %>% summarize(Population = sum(F+M)) %>%
mutate(Generation = Gen_eco, Date = as.numeric(as.POSIXct(paste0(Year, "-01-01"))))
View(tmp)
r$show('inline', cdn = TRUE, include_assets = TRUE)
tmp <- dt_pyramid %>% filter(Geo == "CZ") %>%
group_by(Gen_eco, Year) %>% summarize(Population = sum(F+M)) %>%
mutate(Generation = Gen_eco, Date = as.numeric(as.POSIXct(paste0(Year, "-01-01"))))
r <- Rickshaw$new()
r$layer(Population ~ Date, group = "Generation", data = tmp, type = "area", width = 600)
r$set(slider = TRUE)
r$show('iframesrc', cdn = TRUE)
r$show('inline', cdn = TRUE, include_assets = TRUE)
r
library(rCharts)
tmp <- dt_pyramid %>% filter(Geo == "CZ") %>%
group_by(Gen_eco, Year) %>% summarize(Population = sum(F+M)) %>%
mutate(Generation = Gen_eco, Date = as.numeric(as.POSIXct(paste0(Year, "-01-01"))))
r <- Rickshaw$new()
r$layer(Population ~ Date, group = "Generation", data = tmp, type = "area", width = 600)
r$set(slider = TRUE)
r$save('index_files/rChart1.html', cdn = TRUE)
cat('<iframe src="index_files/rChart1.html" width=100%, height = 100%></iframe>')
#r$show('inline')
r$print('chart1', include_assets = TRUE)
install.packages("nvd3")
library(devtools)
install_github("rCharts", "ramnathv")
library(devtools)
install_github("ramnathv/rCharts")
?rCharts::nPlot
??rCharts::nPlot
# Chunk 1: global_options
knitr::opts_chunk$set(fig.align = 'center', cache = T)
library(dplyr, warn.conflicts = F)
library(knitr, warn.conflicts = F)
# Chunk 2: simple_elementary
# Numeric
a <- 5 # or a = 5
a
class(a) # type - numeric
# Character
string <- "You are a good strudent"
string
class(string)
# Boolean
b <- 1 == 2
b
class(b)
# Date
d <- Sys.Date()
d
class(d)
# Chunk 3: simple_vector
v <- c(1,2,3,4,5)
v
class(v) # class of elements
is.vector(v)
v2 <- c(TRUE, FALSE, 5, 10)
v2 # numeric can fit boolean, but boolean cannot fit numeric like 5. Therefore, it will be saved as numeric - maximum of individual complexities.
class(v2)
v3 <- c(TRUE, 5, "R")
v3
class(v3) # character "R" has the highest complexity
# Subsetting elements from vector
v[1] # first element
v[-2] # whole vector except element #2
v[c(1,3,5)] # elements #1,3,5
# Sorting vector
sort(v2) # sorted vector
order(v2) # which order (ascending) have elements in current sequence
# Chunk 4: simple_factor
f <- factor(c("M","M","M","F","F","F"))
str(f) # How is stored: levels and numeric vector
levels(f) # levels of factor
as.numeric(f) # numeric vector of factor
f
# Checking data type
class(f)
is.factor(f)
# Chunk 5: simple_matrix
# Matrix
M <- matrix(1:16, nrow = 4, ncol = 4)
M
# Checking data type
is.vector(M)
is.matrix(M)
is.array(M) # Matrix is subtype of array with 2 dimensions
class(M)
M[1,3] # Extracting exact element
# array
A <- array(1:120, dim = 5:2)
A # 4-dimensional array
class(A)
is.vector(A)
is.matrix(A)
is.array(A)
dim(A) # size of A (instances in each dimension)
length(dim(A)) # number of dimensions
A[2,1,2,1] # Extracting exact element
# Chunk 6: simple_dataframe
df <- data.frame(size = c(1,4,7,3), price = c(2,6,4,2), type = factor(c("New", "Old", "New", "New")))
df
str(df) # structure of data.frame
# Check data type
class(df)
is.matrix(df)
is.data.frame(df)
df$type # Extracting column
df$type[2] # Extracting exact element
names(df) # names of columns
# Chunk 7: simple_list
l <- list(f = f, df = df, v2 = v2, b = b)
l
str(l)
# Checking data type
class(l)
is.list(l)
names(l) # names of elements
l$f # extracting element of list
l$df$price # column of element of list
l[[1]] # first element of list
# Chunk 8: import
dt_total <- read.csv("D:/OneDrive/VSE/II/R Tutorial/Data/dt_total.csv")
dt_pyramid <- read.csv("D:/OneDrive/VSE/II/R Tutorial/Data/dt_pyramid.csv", header = T, sep = ",", quote = '"', stringsAsFactors = T)
class(dt_total)
str(dt_total)
head(dt_total, 10)
# Chunk 10: binding
rbind(c(1,2,3,4), c(10,9,8,7)) # binding 2 rows
cbind(c(1,2,3,4), c(2,4,1,1)) # binding 2 columns
# Chunk 11: dplyr_example
library(dplyr)
dt_total %>% filter(Geo == "DE_TOT" & Year == 2013) # Filtering
dt_total %>% group_by(Year) %>% summarize(Total_Population = sum(Population, na.rm = T)) %>% head() # Grouping
dt_total %>% mutate(Pop_mln = Population/10^6) %>% head() # Changing columns
# Chunk 12: merge_example
df
sizes <- data.frame(size = c(1, 4, 7, 10),  description = c("small", "medium", "big", "huge"))
sizes
# Merge df and sizes to add column description to the df
merge(df, sizes, by = "size") # INNER JOIN
merge(df, sizes, by = "size", all = T) # FULL JOIN
merge(df, sizes, by = "size", all.x = T) # LEFT JOIN
merge(df, sizes, by = "size", all.y = T) # RIGHT JOIN
# Chunk 13: merge_age
tmp_age <- dt_pyramid %>% filter(Year >= 2010 & Geo == "CZ") %>%
mutate(Population = F + M) %>% select(Age, Year,Population) %>%
filter(!is.na(Population))
tmp_age %>% head()
total_population <- tmp_age %>% group_by(Year) %>% summarize(Total = sum(Population, na.rm = T))
total_population %>% head()
merge(tmp_age, total_population, by = "Year") %>% mutate(Share = Population/Total) %>%
arrange(Year, Age) %>% head()
# Chunk 14: reproducibility
set.seed(1234)
r1 <- rnorm(10)
r2 <- rnorm(10)
set.seed(1235)
r3 <- rnorm(10)
set.seed(1234)
r4 <- rnorm(10)
cbind(r1, r2, r3, r4) # You can easily see that columns #1 and #4 appear similar
# Detailed check
r1 == r4 # this means that columns are the same
r1 == r3 # all pairs of values are different
r1 == r2 # different
all.equal(r1, r4) # another way to check
# Chunk 15: functions_elementary
Masculinity_elementary <- function(M, F) M/F # Very easy form of function
Masculinity_elementary(100, 103) # Easy
Masculinity_elementary(c(100, 89, 103), c(103, 180, 50))
# Chunk 16: functions_vector
Masculinity_vector <- function(M, F) sum(M)/sum(F)
Masculinity_vector(100, 103) # Still works nice
Masculinity_vector(c(100, 89, 103), c(103, 180, 50)) # Now it works
# Chunk 17: functions_df
df <- data.frame(Sex = factor(c("M","M","M","F","F","F")), Population = c(100, 89, 103, 103, 180, 50))
df
Masculinity_dataframe <- function(data) Masculinity_vector(df$Population[df$Sex == "M"], df$Population[df$Sex == "F"])
Masculinity_dataframe(df)
# Chunk 18: apply
# sapply
v
sapply(v, sqrt) # Take square root of each element
sqrt(v) # Luckily, function `sqrt` is adapted for usage on vectors
# lapply
str(l)
lapply(l, class) # type of each object in the list
lapply(l, dim) # dimensions of each element of the list
lapply(l, names) # names of columns of elements of the list
# apply
M
apply(M, MARGIN = 1, mean) # means of custs by 1-st dimensions (average of each row)
rowMeans(M) # same as our `apply` formula
apply(M, MARGIN = 2, mean) # means by 2nd dimension (average of each column)
colMeans(M) # same
# mapply
mapply(FUN = function(x,y) x*y, x = 1:4, y = 2:-1) # mutliplying corresponding elements: 1*2, 2*1, 3*0, 4*(-1)
# Chunk 19: base_graphics
set.seed(20)
x <- rnorm(10)
y <- runif(10)
plot(x, y, main = "Simple plot")
plot(x, y, type = "b", main = "Plot with both lines and point")
abline(h = .5, col = "red")
abline(v = 0, col = "red")
# Chunk 20: ggplot2
library(ggplot2)
df <- data.frame(size = sample(1:10, 20, T), price = runif(20, min = 2, max = 15), type = factor(sample(c("New","Old"), 20, T)))
df
ggplot(data = df, mapping = aes(x = size, y = price)) + geom_point() +
ggtitle("Simple basic graph")
# Chunk 21: ggplot2_2
# Adding 'type' on the plot
df %>% ggplot(aes(x = size, y = price, color = type)) + geom_point() # differentiation by type
df %>% ggplot(aes(x = size, y = price)) + geom_point() + facet_wrap(~type)  # differentiation by type | version 2
# Quick fitting of prediction models
df %>% ggplot(aes(x = size, y = price)) + geom_point() +
stat_smooth(method = "lm") + ggtitle("Linear regression fit with confidence interval")
df %>% ggplot(aes(x = size, y = price)) + geom_point() +
stat_smooth(method = "loess", se = F) + ggtitle("Loess fit")
df %>% ggplot(aes(x = size, y = price, color = type)) + geom_point() +
stat_smooth(method = "lm", se = F) +
ggtitle("Linear regression fit\ndifferentiation by type")
# Chunk 22: ggplot_dem
# Adding generation columns to the dataset
dt_pyramid <- dt_pyramid %>%
mutate(Gen_bio = cut(Age, include.lowest = T, breaks = c(0, 15, 50, 100), right = F),
Gen_eco = cut(Age, include.lowest = T, breaks = c(0, 20, 65, 100), right = F))
tmp <- dt_pyramid %>% filter(Geo %in% c("CZ", "ES") & between(Year, 2000, 2010)) %>%
group_by(Gen_eco, Year, Geo) %>% summarize(Population = sum(F+M))
g <- tmp %>% group_by(Year, Geo) %>% summarize(Tot = sum(Population)) %>% merge(tmp) %>%
mutate(Share = Population/Tot * 100) %>% arrange(Gen_eco) %>%
ggplot(aes(x = Year, y = Share, color = Gen_eco, fill = Gen_eco)) + geom_area() +
facet_wrap(~Geo) + ggtitle("Comparison of countries by economical generations")
g
# Chunk 23: googleVis
library(googleVis)
# Preparation of data: different ratios
library(reshape2) # for some data manipulation
Ratios <- dt_pyramid %>%
filter(Geo %in% c("CZ","ES","NO","SE","DE_TOT") & between(Year, 2000, 2010)) %>%
group_by(Year, Geo) %>% summarize(Masculinity = sum(M)/sum(F))
Ratios <- dt_pyramid %>% mutate(Tot = M + F) %>% group_by(Year, Geo, Gen_bio) %>%
summarize(Tot = sum(Tot)) %>%
dcast(Year + Geo ~ Gen_bio, value.var = "Tot", fun.aggregate = sum, na.rm = T) %>%
setNames(c("Year", "Geo", "I", "II", "III")) %>% mutate(Sauvy = III/I) %>%
select(Year, Geo, Sauvy) %>% merge(Ratios)
Ratios <- dt_pyramid %>% mutate(Tot = M + F) %>% group_by(Year, Geo, Gen_eco) %>%
summarize(Tot = sum(Tot)) %>%
dcast(Year + Geo ~ Gen_eco, value.var = "Tot", fun.aggregate = sum, na.rm = T) %>%
setNames(c("Year", "Geo", "I", "II", "III")) %>%
mutate(TDR = (I+III)/II, OADR = III/II, JADR = I/II, Seniority = III/I) %>%
select(-I,-II,-III) %>% merge(Ratios)
head(Ratios)
# Chunk 24: gvis2
M <- gvisMotionChart(Ratios, idvar = "Geo", timevar = "Year", options = list(width = 550, height = 450), chartid = "chartid")
print(M, 'chart')
# Chunk 25: rcharts
library(rCharts)
tmp <- dt_pyramid %>% filter(Geo == "CZ") %>%
group_by(Gen_eco, Year) %>% summarize(Population = sum(F+M)) %>%
mutate(Generation = Gen_eco, Date = as.numeric(as.POSIXct(paste0(Year, "-01-01"))))
# r <- Rickshaw$new()
# r$layer(Population ~ Date, group = "Generation", data = tmp, type = "multiBarChart", width = 600)
# r$set(slider = TRUE)
r <- nPlot(Population ~ Year, group = "Generation", data = tmp %>% filter(Year > 2005), type = 'multiBarChart', width = 800)
#r$print('nPlot')
#r$show('nPlot1', cdn =TRUE)
#r$print('nPlot', include_assets  = T)
r$save('index_files/rChart1.html', cdn = TRUE)
cat('<iframe src="index_files/rChart1.html" width=800, height = 400></iframe>')
#r$show('inline', cdn = TRUE, include_assets = TRUE)
#r$print('iframesrc', include_assets=TRUE)
# Chunk 26: pyramid
# Special package
library(pyramid)
dt_pyramid %>% filter(Geo == "CZ" & Year == 2000) %>% select(M, F, Age) %>%
pyramid(Csize = 1, Cstep = 5, AxisFM = 'd', Cgap = .1, Laxis = 0:4*25000,
main = "Pyramid of Czech population in 2000")
# Usual ggplot
library(scales) # library for numeric formatting
tmp_pyr <- dt_pyramid %>% filter(Geo %in% c("CZ","BE") & Year %in% c(2000, 2010)) %>%
select(-X, -Gen_bio, -Gen_eco) %>% melt(id = c("Age", "Geo", "Year")) %>%
mutate(Sex = variable, Population = value)
ggplot(data = tmp_pyr, aes(x = Age, y = Population, fill = Sex)) +
geom_bar(data = subset(tmp_pyr, Sex == "F"), stat = "identity") +
geom_bar(data = subset(tmp_pyr, Sex == "M"), aes(y=-Population), stat = "identity") +
scale_y_continuous(labels = function(x) comma(abs(x))) +
coord_flip() + ggtitle("Pyramid graphs of selected years and countries") +
scale_fill_brewer(palette = "Set1") +
facet_grid(Geo ~ Year) + theme_bw()
# ggplot with 5-year grouping
tmp_pyr <- dt_pyramid %>% filter(Geo %in% c("CZ","BE") & Year %in% c(2000, 2010)) %>%
select(-X, -Gen_bio, -Gen_eco) %>% melt(id = c("Age", "Geo", "Year")) %>%
mutate(Sex = variable, Population = value, Age = Age - Age %% 5) %>% group_by(Age, Geo, Year, Sex) %>% summarize(Population = sum(Population))
ggplot(data = tmp_pyr, aes(x = Age, y = Population, fill = Sex)) +
geom_bar(data = subset(tmp_pyr, Sex == "F"), stat = "identity") +
geom_bar(data = subset(tmp_pyr, Sex == "M"), aes(y=-Population), stat = "identity") +
scale_y_continuous(labels = function(x) comma(abs(x))) +
coord_flip() + ggtitle("Pyramid graphs of selected years and countries\n5-year grouping") +
scale_fill_brewer(palette = "Set1") +
facet_grid(Geo ~ Year) + theme_bw()
# Chunk 27
#Example of R presentation is provided [here](google.com).
r <- nPlot(Population ~ Year, group = "Generation", data = tmp %>% filter(Year > 2005), type = 'multiBarChart', width = 820)
r
names(r)
barplot(prop.table(rowSums(HairEyeColor[,,1])), ylim=c(0,1))
rowSums(HairEyeColor[,,1])
View(HairEyeColor)
HairEyeColor
barplot(prop.table(rowSums(HairEyeColor[,,1])), ylim=c(0,1))
barplot(prop.table(rowSums(HairEyeColor[,,])), ylim=c(0,1))
barplot(as.matrix(prop.table(rowSums(HairEyeColor[,,1]))), ylim=c(0,1),beside=FALSE)
barplot(as.matrix(prop.table(rowSums(HairEyeColor[,,]))), ylim=c(0,1),beside=FALSE)
r <- nPlot(Population ~ Year, group = "Generation", data = tmp %>% filter(Year >= 1990), type = 'stackedAreaChart', id = 'nPlot1')
r$set(title = "Development of economical generation in Czech Republic")
r
r <- nPlot(Population ~ Year, group = "Generation", data = tmp %>% filter(Year >= 1990), type = 'stackedAreaChart', id = 'nPlot1')
r$set(title = "Development of economical generation in Czech Republic")
r$chart(reduceXTicks = FALSE)
r
r <- nPlot(Population ~ Year, group = "Generation", data = tmp %>% filter(Year >= 1990), type = 'stackedAreaChart', id = 'nPlot1')
r
r$set(title = "Development of economical generation in Czech Republic")
r
r$chart(reduceXTicks = FALSE)
r
r$chart(reduceXTicks = TRUE)
r
r <- nPlot(Population ~ Year, group = "Generation", data = tmp %>% filter(Year >= 1990), type = 'stackedAreaChart', id = 'nPlot1')
r$set(title = "Development of economical generation in Czech Republic")
r$yAxis(staggerLabels = TRUE)
r
r$yAxis(staggerLabels = FALSE)
r
r$setTemplate(afterScript='<style> svg text {font-size: 9px;}</style>')
r
r <- nPlot(Population ~ Year, group = "Generation", data = tmp %>% filter(Year >= 1990), type = 'stackedAreaChart', id = 'nPlot1')
r$set(title = "Development of economical generation in Czech Republic")
r$setTemplate(afterScript='<style> svg text {font-size: 9px;}</style>')
r$yAxis(staggerLabels = FALSE)
r
setwd("D:/OneDrive/VSE/II/R Tutorial/")
dt_mortality <- read.csv("D:/OneDrive/VSE/II/R Tutorial/Data/dt_mortality.csv")
View(dt_mortality)
write.csv(dt_mortality, row.names = F, file = "D:/OneDrive/VSE/II/R Tutorial/Data/dt_mortality.csv")
dt_mortality <- read.csv("D:/OneDrive/VSE/II/R Tutorial/Data/dt_mortality.csv")
write.csv(dt_mortality[,-1], row.names = F, file = "D:/OneDrive/VSE/II/R Tutorial/Data/dt_mortality.csv")
dt_mortality <- read.csv("D:/OneDrive/VSE/II/R Tutorial/Data/dt_mortality.csv")
dt_mortality$Country <- factor("NO")
View(dt_mortality)
write.csv(dt_mortality, row.names = F, file = "D:/OneDrive/VSE/II/R Tutorial/Data/dt_mortality.csv")
head(dt_mortality)
dt_mortality %>% filter(Country == "NO" & Sex == "M") %>% arrange(Age) %>%
mutate(qx = `Mortality Rate`, px = 1-qx, lx = cumprod(px)*100000/px,
dx = lx * qx, Lx = lx-dx/2) %>%
select(-`Mortality Rate`) %>% arrange(-Age) %>%
mutate(Tx = cumsum(Lx), ex = Tx/lx) %>% arrange(Age) %>% head()
library(dplyr)
dt_mortality %>% filter(Country == "NO" & Sex == "M") %>% arrange(Age) %>%
mutate(qx = `Mortality Rate`, px = 1-qx, lx = cumprod(px)*100000/px,
dx = lx * qx, Lx = lx-dx/2) %>%
select(-`Mortality Rate`) %>% arrange(-Age) %>%
mutate(Tx = cumsum(Lx), ex = Tx/lx) %>% arrange(Age) %>% head()
dt_mortality %>% filter(Country == "NO" & Sex == "M") %>% arrange(Age) %>%
mutate(qx = `Mortality.Rate`, px = 1-qx, lx = cumprod(px)*100000/px,
dx = lx * qx, Lx = lx-dx/2) %>%
select(-`Mortality.Rate`) %>% arrange(-Age) %>%
mutate(Tx = cumsum(Lx), ex = Tx/lx) %>% arrange(Age) %>% head()
dt_mortality %>% filter(Country == "NO" & Sex == "M") %>%
arrange(Age) %>% # Sort table for usage of cummulative functions
mutate(qx = `Mortality.Rate`, px = 1-qx, # simple indicators
lx = cumprod(px)*100000/px, # appropriate calculations after sorting
dx = lx * qx, Lx = lx-dx/2) %>% # simple derivative indicators
select(-`Mortality.Rate`) %>% arrange(-Age) %>% # reverse order for calculation of life expectancy
mutate(Tx = cumsum(Lx), # cumulative sum with descending order for quick calculation
ex = Tx/lx) %>%  # life expectancy as simple derivative indicator
arrange(Age) %>% head()
dt_mortality %>% filter(Country == "NO" & Sex == "M") %>%
arrange(Age) %>% # Sort table for usage of cummulative functions
mutate(qx = `Mortality.Rate`, px = 1-qx, # simple indicators
lx = cumprod(px)*100000/px, # appropriate calculations after sorting
dx = lx * qx, Lx = lx-dx/2) %>% # simple derivative indicators
select(-`Mortality.Rate`) %>% arrange(-Age) %>% # reverse order for calculation of life expectancy
mutate(Tx = cumsum(Lx), # cumulative sum with descending order for quick calculation
ex = Tx/lx) %>%  # life expectancy as simple derivative indicator
arrange(Age) %>%
mutate(qx = round(qx,4), px = round(px,4), lx = comma(lx %>% round(0)), dx = round(dx,1), Lx = comma(Lx %>% round(0)), Tx = comma(Tx %>% round(0)), ex = round(ex,1)) %>% # formatting
print(n = 10)
library(scales)
dt_mortality %>% filter(Country == "NO" & Sex == "M") %>%
arrange(Age) %>% # Sort table for usage of cummulative functions
mutate(qx = `Mortality.Rate`, px = 1-qx, # simple indicators
lx = cumprod(px)*100000/px, # appropriate calculations after sorting
dx = lx * qx, Lx = lx-dx/2) %>% # simple derivative indicators
select(-`Mortality.Rate`) %>% arrange(-Age) %>% # reverse order for calculation of life expectancy
mutate(Tx = cumsum(Lx), # cumulative sum with descending order for quick calculation
ex = Tx/lx) %>%  # life expectancy as simple derivative indicator
arrange(Age) %>%
mutate(qx = round(qx,4), px = round(px,4), lx = comma(lx %>% round(0)), dx = round(dx,1), Lx = comma(Lx %>% round(0)), Tx = comma(Tx %>% round(0)), ex = round(ex,1)) %>% # formatting
print(n = 10)
dt_mortality %>% filter(Country == "NO" & Sex == "M") %>%
arrange(Age) %>% # Sort table for usage of cummulative functions
mutate(qx = `Mortality.Rate`, px = 1-qx, # simple indicators
lx = cumprod(px)*100000/px, # appropriate calculations after sorting
dx = lx * qx, Lx = lx-dx/2) %>% # simple derivative indicators
select(-`Mortality.Rate`) %>% arrange(-Age) %>% # reverse order for calculation of life expectancy
mutate(Tx = cumsum(Lx), # cumulative sum with descending order for quick calculation
ex = Tx/lx) %>%  # life expectancy as simple derivative indicator
arrange(Age) %>%
mutate(qx = round(qx,4), px = round(px,4), lx = comma(lx %>% round(0)), dx = round(dx,1), Lx = comma(Lx %>% round(0)), Tx = comma(Tx %>% round(0)), ex = round(ex,1)) %>% # formatting
print(n = 10)
dt_mortality %>% filter(Country == "NO" & Sex == "M") %>%
arrange(Age) %>% # Sort table for usage of cummulative functions
mutate(qx = `Mortality.Rate`, px = 1-qx, # simple indicators
lx = cumprod(px)*100000/px, # appropriate calculations after sorting
dx = lx * qx, Lx = lx-dx/2) %>% # simple derivative indicators
select(-`Mortality.Rate`) %>% arrange(-Age) %>% # reverse order for calculation of life expectancy
mutate(Tx = cumsum(Lx), # cumulative sum with descending order for quick calculation
ex = Tx/lx) %>%  # life expectancy as simple derivative indicator
arrange(Age) %>%
mutate(qx = round(qx,4), px = round(px,4), lx = comma(lx %>% round(0)), dx = round(dx,1), Lx = comma(Lx %>% round(0)), Tx = comma(Tx %>% round(0)), ex = round(ex,1)) %>% # formatting
head(10)
split(dt_mortality, c(Sex, Country))
split(dt_mortality, c(dt_mortality$Sex, dt_mortality$Country))
split(dt_mortality, list(dt_mortality$Sex, dt_mortality$Country))
split(dt_mortality, list(dt_mortality$Sex, dt_mortality$Country)) %>% str()
life_table <- function(data)
data %>% arrange(Age) %>% mutate(qx = `Mortality.Rate`, px = 1-qx, lx = cumprod(px)*100000/px, dx = lx * qx, Lx = lx-dx/2) %>% select(-`Mortality.Rate`) %>% arrange(-Age) %>% mutate(Tx = cumsum(Lx), ex = Tx/lx) %>% arrange(Age)
lapply(split(dt_mortality, list(dt_mortality$Sex, dt_mortality$Country)),
life_table) %>% str()
lapply(split(dt_mortality, list(dt_mortality$Sex, dt_mortality$Country)),
life_table) %>% rbind_list()
lapply(split(dt_mortality, list(dt_mortality$Sex, dt_mortality$Country)),
life_table) %>% rbind_all()
lapply(split(dt_mortality, list(dt_mortality$Sex, dt_mortality$Country)),
life_table) %>%
rbind_all() %>% # unite lists in one table
arrange(Sex, Country) %>% # sort by sex and country to show that it was calculated
head(10)
lapply(split(dt_mortality, list(dt_mortality$Sex, dt_mortality$Country)),
life_table) %>%
rbind_all() %>% # unite lists in one table
arrange(Age) %>% # sort by age to show that it was calculated for both F and M
head(10)
lapply(split(dt_mortality, list(dt_mortality$Sex, dt_mortality$Country)),
life_table) %>%
rbind_all() %>% # unite lists in one table
arrange(Age) %>% # sort by age to show that it was calculated for both F and M
head(10) %>%
mutate(qx = round(qx,4), px = round(px,4), lx = comma(lx %>% round(0)), dx = round(dx,1), Lx = comma(Lx %>% round(0)), Tx = comma(Tx %>% round(0)), ex = round(ex,1)) # formatting
